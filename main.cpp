#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <algorithm>

#include "Board.h"

using namespace std;

// AXI addresses for the input and output
#define TEST_SIZE 90
#define C_INPUT_0_START_ADDR 1024
#define C_EXPECTED_OUTPUT_START_ADDR 5120
#define C_OUTPUT_START_ADDR 6144
#define C_INIT_ADDR ((1<<18)-8)
#define C_GO_EPOCH_ADDR ((1<<18)-6)
#define C_EPOCH_SIZE_ADDR ((1<<18)-5)
#define C_DONE_ADDR ((1<<18)-4)

//#define DEBUG

int main(int argc, char* argv[]) {

  // make sure unsigned is 4 bytes on this machine
  assert(sizeof(unsigned) == 4);

  if (argc != 2) {
    cerr << "Usage: " << argv[0] << " bitfile" << endl;
    return -1;
  }
  
  vector<float> clocks(Board::NUM_FPGA_CLOCKS);
  clocks[0] = 100.0;
  clocks[1] = 0.0;
  clocks[2] = 0.0;
  clocks[3] = 0.0;

  // initialize board
  Board *board;
  try {
    board = new Board(argv[1], clocks);
  }
  catch(...) {
    exit(-1);
  }

  // float sepal_length_test[TEST_SIZE] = {4.8, 6.1, 6.5, 5.5, 5.7, 5.8, 6.9, 6.4, 6.4, 6.7, 6.3, 5.8, 6.7, 5.7, 4.5, 6.5, 6.7, 6.7, 6.0, 7.3, 6.4, 6.7, 5.0, 5.2, 4.9, 5.9, 6.1, 4.9, 5.7, 6.8, 5.7, 7.7, 5.8, 6.3, 5.4, 7.2, 5.2, 5.2, 4.7, 7.2, 4.8, 5.9, 5.0, 5.1, 6.3, 4.7, 6.1, 6.7, 6.9, 6.2, 5.1, 6.6, 7.0, 5.0, 5.0, 5.6, 4.6, 5.5, 6.7, 5.4, 6.3, 5.6, 7.9, 5.9, 6.7, 5.5, 4.9, 5.4, 5.1, 6.2, 7.2, 6.3, 5.2, 5.5, 6.3, 6.4, 5.0, 6.0, 5.1, 5.8, 5.1, 6.2, 5.1, 7.7, 6.9, 5.6, 4.9, 5.5, 5.3, 6.4};
  // float sepal_width_test[TEST_SIZE] =  {3.4, 2.8, 3.0, 3.5, 3.8, 2.7, 3.2, 3.2, 3.2, 3.3, 2.7, 2.7, 3.1, 2.9, 2.3, 3.0, 3.3, 3.1, 2.9, 2.9, 2.8, 2.5, 3.4, 3.5, 3.1, 3.0, 3.0, 3.1, 4.4, 2.8, 2.5, 2.6, 2.7, 2.9, 3.4, 3.2, 3.4, 2.7, 3.2, 3.6, 3.0, 3.2, 2.0, 3.5, 2.8, 3.2, 2.6, 3.0, 3.1, 3.4, 3.7, 2.9, 3.2, 3.3, 2.3, 3.0, 3.4, 2.4, 3.1, 3.4, 3.3, 3.0, 3.8, 3.0, 3.0, 2.3, 3.0, 3.0, 3.8, 2.9, 3.0, 3.3, 4.1, 4.2, 3.4, 2.8, 3.2, 2.7, 3.8, 2.8, 3.8, 2.2, 3.4, 3.0, 3.1, 2.9, 2.4, 2.4, 3.7, 2.9};
  // float petal_length_test[TEST_SIZE] = {1.9, 4.7, 5.8, 1.3, 1.7, 4.1, 5.7, 4.5, 5.3, 5.7, 4.9, 5.1, 4.7, 4.2, 1.3, 5.5, 5.7, 5.6, 4.5, 6.3, 5.6, 5.8, 1.6, 1.5, 1.5, 4.2, 4.6, 1.5, 1.5, 4.8, 5.0, 6.9, 5.1, 5.6, 1.7, 6.0, 1.4, 3.9, 1.6, 6.1, 1.4, 4.8, 3.5, 1.4, 5.1, 1.3, 5.6, 5.2, 5.1, 5.4, 1.5, 4.6, 4.7, 1.4, 3.3, 4.1, 1.4, 3.7, 4.4, 1.5, 6.0, 4.5, 6.4, 5.1, 5.0, 4.0, 1.4, 4.5, 1.9, 4.3, 5.8, 4.7, 1.5, 1.4, 5.6, 5.6, 1.2, 5.1, 1.5, 5.1, 1.6, 4.5, 1.5, 6.1, 4.9, 3.6, 3.3, 3.8, 1.5, 4.3};
  // float petal_width_test[TEST_SIZE] =  {0.2, 1.2, 2.2, 0.2, 0.3, 1.0, 2.3, 1.5, 2.3, 2.1, 1.8, 1.9, 1.5, 1.3, 0.3, 1.8, 2.5, 2.4, 1.5, 1.8, 2.1, 1.8, 0.4, 0.2, 0.1, 1.5, 1.4, 0.1, 0.4, 1.4, 2.0, 2.3, 1.9, 1.8, 0.2, 1.8, 0.2, 1.4, 0.2, 2.5, 0.1, 1.8, 1.0, 0.2, 1.5, 0.2, 1.4, 2.3, 2.3, 2.3, 0.4, 1.3, 1.4, 0.2, 1.0, 1.3, 0.3, 1.0, 1.4, 0.4, 2.5, 1.5, 2.0, 1.8, 1.7, 1.3, 0.2, 1.5, 0.4, 1.3, 1.6, 1.6, 0.1, 0.2, 2.4, 2.2, 0.2, 1.6, 0.3, 2.4, 0.2, 1.5, 0.2, 2.3, 1.5, 1.3, 1.0, 1.1, 0.2, 1.3};
  // float sepal_length_test[TEST_SIZE] = {0b10011001, 0b11000011, 0b11010000, 0b10110000, 0b10110110, 0b10111001, 0b11011100, 0b11001001, 0b11001001, 0b11010110, 0b11001001, 0b10111001, 0b11010110, 0b10110110, 0b10010000, 0b11010000, 0b11010110, 0b11010110, 0b11000000, 0b11101001, 0b11001001, 0b11010110, 0b10100000, 0b10100110, 0b10011100, 0b10111100, 0b11000011, 0b10011100, 0b10110110, 0b11011001, 0b10110110, 0b11110110, 0b10111001, 0b11001001, 0b10101001, 0b11100110, 0b10100110, 0b10100110, 0b10010110, 0b11100110, 0b10011001, 0b10111100, 0b10100000, 0b10100011, 0b11001001, 0b10010110, 0b11000011, 0b11010110, 0b11011100, 0b11000110, 0b10100011, 0b11010011, 0b11100000, 0b10100000, 0b10100000, 0b10110011, 0b10010011, 0b10110000, 0b11010110, 0b10101001, 0b11001001, 0b10110011, 0b11111100, 0b10111100, 0b11010110, 0b10110000, 0b10011100, 0b10101001, 0b10100011, 0b11000110, 0b11100110, 0b11001001, 0b10100110, 0b10110000, 0b11001001, 0b11001001, 0b10100000, 0b11000000, 0b10100011, 0b10111001, 0b10100011, 0b11000110, 0b10100011, 0b11110110, 0b11011100, 0b10110011, 0b10011100, 0b10110000, 0b10101001, 0b11001001};
  // float sepal_width_test[TEST_SIZE]  = {0b01101001, 0b01011001, 0b01100000, 0b01110000, 0b01111001, 0b01010110, 0b01100110, 0b01100110, 0b01100110, 0b01101001, 0b01010110, 0b01010110, 0b01100011, 0b01011100, 0b01001001, 0b01100000, 0b01101001, 0b01100011, 0b01011100, 0b01011100, 0b01011001, 0b01010000, 0b01101001, 0b01110000, 0b01100011, 0b01100000, 0b01100000, 0b01100011, 0b10001001, 0b01011001, 0b01010000, 0b01010011, 0b01010110, 0b01011100, 0b01101001, 0b01100110, 0b01101001, 0b01010110, 0b01100110, 0b01110011, 0b01100000, 0b01100110, 0b01000000, 0b01110000, 0b01011001, 0b01100110, 0b01010011, 0b01100000, 0b01100011, 0b01101001, 0b01110110, 0b01011100, 0b01100110, 0b01101001, 0b01001001, 0b01100000, 0b01101001, 0b01001001, 0b01100011, 0b01101001, 0b01101001, 0b01100000, 0b01111001, 0b01100000, 0b01100000, 0b01001001, 0b01100000, 0b01100000, 0b01111001, 0b01011100, 0b01100000, 0b01101001, 0b10000011, 0b10000110, 0b01101001, 0b01011001, 0b01100110, 0b01010110, 0b01111001, 0b01011001, 0b01111001, 0b01000110, 0b01101001, 0b01100000, 0b01100011, 0b01011100, 0b01001001, 0b01001001, 0b01110110, 0b01011100};
  // float petal_length_test[TEST_SIZE] = {0b00111100, 0b10010110, 0b10111001, 0b00101001, 0b00110110, 0b10000011, 0b10110110, 0b10010000, 0b10101001, 0b10110110, 0b10011100, 0b10100011, 0b10010110, 0b10000110, 0b00101001, 0b10110000, 0b10110110, 0b10110011, 0b10010000, 0b11001001, 0b10110011, 0b10111001, 0b00110011, 0b00110000, 0b00110000, 0b10000110, 0b10010011, 0b00110000, 0b00110000, 0b10011001, 0b10100000, 0b11011100, 0b10100011, 0b10110011, 0b00110110, 0b11000000, 0b00101001, 0b01111100, 0b00110011, 0b11000011, 0b00101001, 0b10011001, 0b01110000, 0b00101001, 0b10100011, 0b00101001, 0b10110011, 0b10100110, 0b10100011, 0b10101001, 0b00110000, 0b10010011, 0b10010110, 0b00101001, 0b01101001, 0b10000011, 0b00101001, 0b01110110, 0b10001001, 0b00110000, 0b11000000, 0b10010000, 0b11001001, 0b10100011, 0b10100000, 0b10000000, 0b00101001, 0b10010000, 0b00111100, 0b10001001, 0b10111001, 0b10010110, 0b00110000, 0b00101001, 0b10110011, 0b10110011, 0b00100110, 0b10100011, 0b00110000, 0b10100011, 0b00110011, 0b10010000, 0b00110000, 0b11000011, 0b10011100, 0b01110011, 0b01101001, 0b01111001, 0b00110000, 0b10001001};
  // float petal_width_test[TEST_SIZE]  = {0b00000110, 0b00100110, 0b01000110, 0b00000110, 0b00001001, 0b00100000, 0b01001001, 0b00110000, 0b01001001, 0b01000011, 0b00111001, 0b00111100, 0b00110000, 0b00101001, 0b00001001, 0b00111001, 0b01010000, 0b01001001, 0b00110000, 0b00111001, 0b01000011, 0b00111001, 0b00001001, 0b00000110, 0b00000011, 0b00110000, 0b00101001, 0b00000011, 0b00001001, 0b00101001, 0b01000000, 0b01001001, 0b00111100, 0b00111001, 0b00000110, 0b00111001, 0b00000110, 0b00101001, 0b00000110, 0b01010000, 0b00000011, 0b00111001, 0b00100000, 0b00000110, 0b00110000, 0b00000110, 0b00101001, 0b01001001, 0b01001001, 0b01001001, 0b00001001, 0b00101001, 0b00101001, 0b00000110, 0b00100000, 0b00101001, 0b00001001, 0b00100000, 0b00101001, 0b00001001, 0b01010000, 0b00110000, 0b01000000, 0b00111001, 0b00110110, 0b00101001, 0b00000110, 0b00110000, 0b00001001, 0b00101001, 0b00110011, 0b00110011, 0b00000011, 0b00000110, 0b01001001, 0b01000110, 0b00000110, 0b00110011, 0b00001001, 0b01001001, 0b00000110, 0b00110000, 0b00000110, 0b01001001, 0b00110000, 0b00101001, 0b00100000, 0b00100011, 0b00000110, 0b00101001};
  
  /*
   * Data Format:
   *  sepal_length[0:7] | sepal_width[8:15] | petal_length[16:23] | petal_width[24:31]
   * Data Type:
   *  unsigned fixed-point XXX.XXXXX
   *  3 bit integer
   *  5 bit decimal
   * Info:
   *  Max Value - 7.96875
   *  Step      - 0.03125
   */
  float input_data[TEST_SIZE] = { 0b10011001011010010011110000000110, 
                                  0b11000011010110011001011000100110, 
                                  0b11010000011000001011100101000110, 
                                  0b10110000011100000010100100000110, 
                                  0b10110110011110010011011000001001, 
                                  0b10111001010101101000001100100000, 
                                  0b11011100011001101011011001001001, 
                                  0b11001001011001101001000000110000, 
                                  0b11001001011001101010100101001001, 
                                  0b11010110011010011011011001000011, 
                                  0b11001001010101101001110000111001, 
                                  0b10111001010101101010001100111100, 
                                  0b11010110011000111001011000110000, 
                                  0b10110110010111001000011000101001, 
                                  0b10010000010010010010100100001001, 
                                  0b11010000011000001011000000111001, 
                                  0b11010110011010011011011001010000, 
                                  0b11010110011000111011001101001001, 
                                  0b11000000010111001001000000110000, 
                                  0b11101001010111001100100100111001, 
                                  0b11001001010110011011001101000011, 
                                  0b11010110010100001011100100111001, 
                                  0b10100000011010010011001100001001, 
                                  0b10100110011100000011000000000110, 
                                  0b10011100011000110011000000000011, 
                                  0b10111100011000001000011000110000, 
                                  0b11000011011000001001001100101001, 
                                  0b10011100011000110011000000000011, 
                                  0b10110110100010010011000000001001, 
                                  0b11011001010110011001100100101001, 
                                  0b10110110010100001010000001000000, 
                                  0b11110110010100111101110001001001, 
                                  0b10111001010101101010001100111100, 
                                  0b11001001010111001011001100111001, 
                                  0b10101001011010010011011000000110, 
                                  0b11100110011001101100000000111001, 
                                  0b10100110011010010010100100000110, 
                                  0b10100110010101100111110000101001, 
                                  0b10010110011001100011001100000110, 
                                  0b11100110011100111100001101010000, 
                                  0b10011001011000000010100100000011, 
                                  0b10111100011001101001100100111001, 
                                  0b10100000010000000111000000100000, 
                                  0b10100011011100000010100100000110, 
                                  0b11001001010110011010001100110000, 
                                  0b10010110011001100010100100000110, 
                                  0b11000011010100111011001100101001, 
                                  0b11010110011000001010011001001001, 
                                  0b11011100011000111010001101001001, 
                                  0b11000110011010011010100101001001, 
                                  0b10100011011101100011000000001001, 
                                  0b11010011010111001001001100101001, 
                                  0b11100000011001101001011000101001, 
                                  0b10100000011010010010100100000110, 
                                  0b10100000010010010110100100100000, 
                                  0b10110011011000001000001100101001, 
                                  0b10010011011010010010100100001001, 
                                  0b10110000010010010111011000100000, 
                                  0b11010110011000111000100100101001, 
                                  0b10101001011010010011000000001001, 
                                  0b11001001011010011100000001010000, 
                                  0b10110011011000001001000000110000, 
                                  0b11111100011110011100100101000000, 
                                  0b10111100011000001010001100111001, 
                                  0b11010110011000001010000000110110, 
                                  0b10110000010010011000000000101001, 
                                  0b10011100011000000010100100000110, 
                                  0b10101001011000001001000000110000, 
                                  0b10100011011110010011110000001001, 
                                  0b11000110010111001000100100101001, 
                                  0b11100110011000001011100100110011, 
                                  0b11001001011010011001011000110011, 
                                  0b10100110100000110011000000000011, 
                                  0b10110000100001100010100100000110, 
                                  0b11001001011010011011001101001001, 
                                  0b11001001010110011011001101000110, 
                                  0b10100000011001100010011000000110, 
                                  0b11000000010101101010001100110011, 
                                  0b10100011011110010011000000001001, 
                                  0b10111001010110011010001101001001, 
                                  0b10100011011110010011001100000110, 
                                  0b11000110010001101001000000110000, 
                                  0b10100011011010010011000000000110, 
                                  0b11110110011000001100001101001001, 
                                  0b11011100011000111001110000110000, 
                                  0b10110011010111000111001100101001, 
                                  0b10011100010010010110100100100000, 
                                  0b10110000010010010111100100100011, 
                                  0b10101001011101100011000000000110, 
                                  0b11001001010111001000100100101001};

  float expected_output_test[TEST_SIZE] = {0, 1, 2, 0, 0, 1, 2, 1, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 1, 2, 2, 2, 0, 0, 0, 1, 1, 0, 0, 1, 2, 2, 2, 2, 0, 2, 0, 1, 0, 2, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 2, 1, 0, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 2, 1, 1, 1, 1, 0, 1};

   
  std::cout<<"Loading Memories"<<std::endl;

  board->write(input_data, C_INPUT_0_START_ADDR, TEST_SIZE);
  board->write(expected_output_test, C_EXPECTED_OUTPUT_START_ADDR, TEST_SIZE);

  int init, bp, go_epoch, epoch_size, done;
  init = 1;
  go_epoch = 1;
  
  std::cout<<"Initializing Net"<<std::endl;

  board->write(&init, C_INIT_ADDR, 1);
  board->write(&go_epoch, C_GO_EPOCH_ADDR, 1);

  std::cout<<"Running Net"<<std::endl;
  
  done = 0;
  while(!done){
  board->read(&done, C_DONE_ADDR, 1);
  }

  std::cout<<"Finished."<<std::endl<<"Net Output:"<<std::endl;

  int output[TEST_SIZE];
  board->read(output, C_OUTPUT_START_ADDR, 1);
  
  for(int i = 0; i < TEST_SIZE; i++){
  std::cout<<output[i]<<std::endl;
  }

  return 1;
}